# deploy using Helm using a script to catch errors and log to the console
parameters:
  - name: valuesFile
    type: string
    displayName: 'Helm Value File'

  - name: releaseName
    type: string
    displayName: 'Helm Release Name'

  - name: azSubscription
    type: string
    displayName: 'Azure Subscription for K8s'

  - name: azResourceGroup
    type: string
    displayName: 'Azure Resource Group for K8s'

  - name: k8sCluster
    type: string
    displayName: 'K8s Cluster'

  - name: preHookJobName
    type: string
    displayName: 'Optional pre-init hook job name, usually same as releaseName'
    default: ''

  - name: registry
    type: string
    displayName: 'Helm Registry'

  - name: k8s-user
    type: string
    displayName: 'K8s User'

  - name: k8s-password
    type: string
    displayName: 'K8s Password'

  - name: chartVersion
    type: string
    default: '3.1.0'

  - name: chart
    type: string
    default: 'oci://YourCompany.azurecr.io/helm/YourCompany-app'

  - name: chartName
    type: string
    default: 'YourCompany-app'

  - name: namespace
    type: string
    default: 'default'
    displayName: 'K8s Namespace'

  - name: timeoutMin
    type: number
    default: 5
    displayName: 'Timeout in minutes for Pods to be ready'

  - name: preHookTimeoutMin
    type: number
    default: 3
    displayName: 'Timeout in minutes for PreHook Job to complete'

  - name: skipRollbackOnError
    type: boolean
    default: false
    displayName: 'Do not rollback on failure'

  - name: skipDeploy
    type: boolean
    default: false
    displayName: 'Check for preHook only, not Deployment'

  - name: verbose
    type: string # since using variable override, this must be a string
    displayName: 'Verbose logging if true'
    default: $(verbose)

  - name: dryRun
    type: boolean
    default: false

  - name: inlineVariables
    type: string
    default: ''
    displayName: Any extra inlineVariables for the replacetokens task

  - name: prerelease
    type: string
    default: $(k8sUtilsPrerelease)
    displayName: Use a prerelease version of K8sUtils

steps:
  # need to run kubectl in the script below
  - task: Kubernetes@1
    displayName: 'Kubernetes Login'
    inputs:
      connectionType: Azure Resource Manager
      useClusterAdmin: true
      azureSubscriptionEndpoint: ${{ parameters.azSubscription }}
      azureResourceGroup: ${{ parameters.azResourceGroup }}
      kubernetesCluster: ${{ parameters.k8sCluster }}
      command: 'login'

  - pwsh: |
      # https://github.com/microsoft/azure-pipelines-tasks/issues/13684 to avoid warnings about it being world-readable
      chmod 0600 /home/vsts/work/_temp/kubectlTask/*/config
      chmod 0600 /agent/_work/_temp/kubectlTask/*/config

      $LASTEXITCODE = 0
      for ($i = 0; $i -lt 10; $i++) {
        helm registry login ${{ parameters.registry }} --username ${{ parameters.helmUser }} --password ${{ parameters.helmPassword }}
        if ($LASTEXITCODE -eq 0) { break }
        Write-Host "helm registry login failed, retrying in 3 seconds"
        Start-Sleep -Seconds 3
      }
    displayName: 'Login to helm registry'

  - pwsh: |
      # unrelated to install, but avoid one more task
      # split out the filename from the path to be able to put in temp folder for replacetokens below
      "vso[task.setvariable variable=valueFileName]$(Split-Path -Leaf '${{ parameters.valuesFile }}')"
      "##vso[task.setvariable variable=valueFileName]$(Split-Path -Leaf '${{ parameters.valuesFile }}')"

      # install K8sUtils
      $prerelease = '${{ parameters.prerelease }}' -eq 'true'
      if ($prerelease) {
        Write-Host "Prerelease is set. Will allow prerelease version of K8sUtils"
      }

      Write-Host "Installing K8sUtils from PS Gallery"
      Install-Module -Name K8sUtils -AllowClobber -Force -AllowPrerelease:$prerelease -PassThru | Select-Object Name, Version, PreRelease

      Get-Module K8sUtils | Select-Object Name, Version, PreRelease
    displayName: 'Install K8sUtils'

  - task: qetza.replacetokens.replacetokens-task.replacetokens@5
    displayName: 'Replacing #{VAR}#. Will error on missing variables'
    inputs:
      targetFiles: ${{ parameters.valuesFile }} => $(Agent.TempDirectory)/$(valueFileName)
      inlineVariables: ${{ parameters.inlineVariables }}
      actionOnMissing: fail

  - pwsh: |
      Get-Content $(Agent.TempDirectory)/$(valueFileName)
    displayName: 'Show Helm Values'

  - pwsh: |
      $skipRollbackOnError = '${{ parameters.skipRollbackOnError }}' -eq 'true'
      $verbose = '${{ parameters.verbose }}' -eq 'true'
      $selector = ('${{ parameters.skipDeploy }}' -eq 'true') ? '' : 'app=${{ parameters.releaseName }}'
      $dryRun = '${{ parameters.dryRun }}' -eq 'true'
      $timeoutSecs = ${{ parameters.timeoutMin }}*60
      $preHookTimeoutSecs = ${{ parameters.preHookTimeoutMin }}*60
      $preHookJobName = '${{ parameters.preHookJobName }}'

      $deploy = Invoke-HelmUpgrade @parms

      $deploy | ConvertTo-Json -Depth 5 -EnumsAsStrings
      if (!$dryRun -and !$deploy.Running -and ($selector -or $preHookJobName)) {
        Write-Error "Deployment failed since not deploy.Running is false"
        exit 1
      }

    displayName: 'Deploy ${{ parameters.releaseName }}'
